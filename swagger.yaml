swagger: "2.0"
info:
  description: "This is a sample doc for mod-checkup.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.7.3"
  title: "Mod-Shutup API Docs"
host: "localhost:5000"
basePath: "/api"
tags:
- name: "reviews"
  description: "About reviews"
- name: "subjects"
  description: "Access to mod-checkup subjects"
- name: "users"
  description: "Operations about user"
schemes:
- "http"
- "https"
paths:
  /reviews:
    post:
      tags:
      - "reviews"
      summary: "Create a new review."
      description: ""
      operationId: "createPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Review(Post) object that needs to be added to the website"
        required: true
        schema:
          $ref: "#/definitions/Post"
      responses:
        "200":
          description: "The created object will be returned"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "reviews"
      summary: "Get all reviews"
      operationId: "getAllPosts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "All of the posts will be returned"
        "404":
          description: "Not Found"
  /reviews/{postId}:
    get:
      tags:
      - "reviews"
      summary: "Get a specified review"
      operationId: "getPostById"
      consumes:
      - "application/json"
      produces:
      - "appllication/json"
      parameters:
      - name: "postId"
        in: "path"
        type: "string"
        description: "ID of the post to view"
        required: true
      responses:
        "200":
          description: "The updated object will be returned"
        "404":
          description: "Post not found"
    put:
      tags:
      - "reviews"
      summary: "Update an existing review"
      description: ""
      operationId: "updatePost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        type: "string"
        description: "ID of post to edit"
        required: true
      - in: "body"
        name: "body"
        description: "Review(Post) object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Post"
      responses:
        "200":
          description: "The updated object will be returned"
        "404":
          description: "Post not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "reviews"
      summary: "Soft delete a specified reviews"
      operationId: "softDeletePost"
      consumes:
      - "application/json"
      produces:
      - "appllication/json"
      parameters:
      - name: "postId"
        in: "path"
        type: "string"
        description: "ID of the post to soft delete"
        required: true
      responses:
        "200":
          description: "The updated object will be returned"
        "404":
          description: "Post not found"
  /reviews/{postId}/like:
    patch:
      tags:
      - "reviews"
      summary: "Give a like to the review"
      operationId: "likePost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        type: "string"
        description: "ID of post to give a like"
        required: true
      responses:
        "200":
          description: "The updated object will be returned"
        "404":
          description: "Post not found"
  /reviews/{postId}/dislike:
    patch:
      tags:
      - "reviews"
      summary: "Give a dislike to the review"
      operationId: "dislikePost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        type: "string"
        description: "ID of post to give a dislike"
        required: true
      responses:
        "200":
          description: "The updated object will be returned"
        "404":
          description: "Post not found"
  /subjects:
    get:
      tags:
      - "subjects"
      summary: "Get all subjects"
      operationId: "getAllSubjects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "All of the subjects will be returned"
        "404":
          description: "Not Found"
  /subjects/{subjectAbbr}:
    get:
      tags:
      - "subjects"
      summary: "Get all reviews by subject"
      operationId: "getPostBySubject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subjectAbbr"
        in: "path"
        type: "string"
        description: "Subject Abbreviation (Ex. OOP122)"
        required: true
      responses:
        "200":
          description: "Specified subject's reviews will be returned"
        "404":
          description: "Not Found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Post:
    type: "object"
    properties:
      grade_received:
        type: "string"
        description: "Grade that the reviewer received."
        enum:
        - "A"
        - "B+"
        - "B"
        - "C+"
        - "C"
        - "D+"
        - "D"
        - "F"
      teacher_rating:
        type: "integer"
        format: "int32"
        description: "Teacher Rating (0-5)"
      usefulness_rating:
        type: "integer"
        format: "int32"
        description: "Usefulness Rating (0-5)"
      participation_rating:
        type: "integer"
        format: "int32"
        description: "Participation Rating (0-5)"
      academic_year:
        type: "integer"
        format: "int32"
        description: "Academic year reference for the review"
      semester:
        type: "integer"
        format: "int32"
        description: "Semester reference for the review"
      reviewer:
        type: "string"
        description: "Id of the reviewer"
      reviewedSubject:
        type: "string"
        description: "Id of the subject"
      like_rating:
        type: "integer"
        default: 0
        description: "In case of using the old data"
      dislike_rating:
        default: 0
        type: "integer"
        description: "In case of using the old data"
      active:
        type: "boolean"
        default: true
        description: "Active status (0 when soft deleted)"
      review_teacher:
        type: "string"
        description: "Id of teacher"
      review_detail:
        type: "string"
        description: "Review's details"
      section:
        type: "string"
        description: "Section that the reviewer is in"
    required:
      - grade_received
      - teacher_rating
      - usefulness_rating
      - participation_rating
      - academic_year
      - semester
      - reviewer
      - reviewedSubject
  Subject:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "Id based on mongoose ObjectId"
      subject_abbr:
        type: "string"
        description: "Subject Abbreviation (FDM012)"
      subject_name:
        type: "string"
        description: "Subject full name (Fire Department Managing 1)"
      average_rating:
        type: "number"
        description: "Average rating of subject"
  User:
    type: "object"
    properties:
      google_id:
        type: "string"
        description: "Google ID from KMUTT account"
      owner_role:
        type: "string"
        description: "Account Role"
        enum: 
        - "Student"
        - "Teacher"
        - "Admin"
  Comment:
    type: "object"
    properties:
      comment_detail:
        type: "string"
        description: "The review's detail"
      base_post:
        type: "string"
        description: "The id of the post this comment based on"
      like_rating:
        type: "integer"
        default: 0
        description: "In case of using the old data"
      dislike_rating:
        default: 0
        type: "integer"
        description: "In case of using the old data"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
